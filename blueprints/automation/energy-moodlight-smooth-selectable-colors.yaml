blueprint:
  name: Energy Moodlight Smooth - selectable gradient colors
  description: Change the color of a light smoothly based on power consumption and solar power. Version with selectable gradient colors.
  domain: automation
  input:
    solar_power_sensor:
      name: Solar Power Sensor
      description: Sensor entity ID for solar power
      selector:
        entity:
          domain: sensor
    power_consumed_sensor:
      name: Power Consumed Sensor
      description: Sensor entity ID for power consumed
      selector:
        entity:
          domain: sensor
    light_to_control:
      name: Light to Control
      description: Light entity ID to control
      selector:
        entity:
          domain: light
    min_value:
      name: Minimum Value
      description: Minimum value for normalization
      default: -3000
      selector:
        number:
          min: -10000
          max: 0
          unit_of_measurement: ''
    max_value:
      name: Maximum Value
      description: Maximum value for normalization
      default: 2500
      selector:
        number:
          min: 0
          max: 10000
          unit_of_measurement: ''
    color1:
      name: Color 1
      description: First color in the gradient
      default: [0, 255, 0]
      selector:
        color_rgb:
    color2:
      name: Color 2
      description: Second color in the gradient
      default: [255, 255, 0]
      selector:
        color_rgb:
    color3:
      name: Color 3
      description: Third color in the gradient
      default: [255, 165, 0]
      selector:
        color_rgb:
    color4:
      name: Color 4
      description: Fourth color in the gradient
      default: [255, 0, 0]
      selector:
        color_rgb:
    color5:
      name: Color 5
      description: Fifth color in the gradient
      default: [128, 0, 128]
      selector:
        color_rgb:
  source_url: https://github.com/smartenergycontrol-be/blueprints/blob/main/blueprints/automation/energy-moodlight-smooth.yaml
trigger:
  - platform: state
    entity_id: !input solar_power_sensor
  - platform: state
    entity_id: !input power_consumed_sensor
condition:
  - condition: state
    entity_id: !input light_to_control
    state: 'on'
action:
  - variables:
      colors:
        - !input color1
        - !input color2
        - !input color3
        - !input color4
        - !input color5
      min_val: !input min_value
      max_val: !input max_value
      power_consumed_sensor: !input power_consumed_sensor
      solar_power_sensor: !input solar_power_sensor
  - service: light.turn_on
    target:
      entity_id: !input light_to_control
    data:
      rgb_color: >
        {% set house = states(power_consumed_sensor) | float %}
        {% set solar = states(solar_power_sensor) | float %}
        {% set value = house - solar %}
        {% set normalized = (value - min_val) / (max_val - min_val) %}
        {% set num_colors = colors | length %}
        {% set segment = (num_colors - 1) * normalized %}
        {% set index = segment | int %}
        {% set weight = segment - index %}

        {% if index < num_colors - 1 %}
          {% set r = (colors[index][0] * (1 - weight) + colors[index + 1][0] * weight) | int %}
          {% set g = (colors[index][1] * (1 - weight) + colors[index + 1][1] * weight) | int %}
          {% set b = (colors[index][2] * (1 - weight) + colors[index + 1][2] * weight) | int %}
        {% else %}
          {% set r, g, b = colors[-1] %}
        {% endif %}

        [{{ r }}, {{ g }}, {{ b }}]
mode: single